### Day 62 - July 21, 2025

#### ‚úÖ Problems Solved:
1. [435. Non-overlapping Intervals](https://leetcode.com/problems/non-overlapping-intervals/)  
2. [1957. Delete Characters to Make Fancy String](https://leetcode.com/problems/delete-characters-to-make-fancy-string/)

---

#### üîç Problem 1: Non-overlapping Intervals
**Approach:**  
- Sort intervals by end time.
- Track previous interval's end.
- Count how many overlap with previous and need removal.

**Code:**
```cpp
class Solution {
public:
    int eraseOverlapIntervals(vector<vector<int>>& intervals) {
        if (intervals.empty()) return 0;

        sort(intervals.begin(), intervals.end(), [](const vector<int>& a, const vector<int>& b) {
            return a[1] < b[1];
        });

        int count = 0;
        int prevEnd = intervals[0][1];

        for (int i = 1; i < intervals.size(); ++i) {
            if (intervals[i][0] < prevEnd) {
                count++;
            } else {
                prevEnd = intervals[i][1];
            }
        }

        return count;
    }
};
````

---

#### üîç Problem 2: Delete Characters to Make Fancy String

**Approach:**

* Use a counter to track consecutive duplicates.
* Skip characters if the count hits 3.

**Code:**

```cpp
class Solution {
public:
    string makeFancyString(string s) {
        if (!s.size()) return s;

        int curr = 1;
        char prev = s[0];
        string ans(1, prev);

        for (int i = 1; i < s.size(); i++) {
            if (s[i] == prev) {
                curr++;
                if (curr == 3) {
                    curr--;
                    continue;
                }
            } else {
                curr = 1;
                prev = s[i];
            }
            ans += s[i];
        }

        return ans;
    }
};
```

---

#### üåü Learnings:

* Greedy strategy helps in optimizing overlapping choices.
* Character frequency tracking is powerful in string formatting problems.

```
