# Day 37 of #100DaysOfCode

Today I solved the following LeetCode problems:

## âœ… 144. Binary Tree Preorder Traversal

**Problem Link:** [144. Binary Tree Preorder Traversal](https://leetcode.com/problems/binary-tree-preorder-traversal/)
**Approach:**

* Used a helper function to recursively visit nodes in the order: root â†’ left â†’ right.

```cpp
class Solution {
public:
    void helper(TreeNode* root, vector<int>& ans) {
        if (!root)
            return;
        ans.push_back(root->val);
        helper(root->left, ans);
        helper(root->right, ans);
    }
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> ans;
        helper(root, ans);
        return ans;
    }
};
```

---

## âœ… 94. Binary Tree Inorder Traversal

**Problem Link:** [94. Binary Tree Inorder Traversal](https://leetcode.com/problems/binary-tree-inorder-traversal/)
**Approach:**

* Applied recursion to visit nodes in the order: left â†’ root â†’ right.

```cpp
class Solution {
public:
    void helper(TreeNode* root, vector<int>& ans) {
        if (root == NULL)
            return;
        helper(root->left, ans);
        ans.push_back(root->val);
        helper(root->right, ans);
    }
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        helper(root, ans);
        return ans;
    }
};
```

---

ðŸ’¡ **What I Learned:**

* Strengthened recursive traversal patterns in binary trees.
* Differentiated between preorder and inorder logic in practice.

---

\#100DaysOfCode #LeetCode #CPlusPlus #buildinpublic #ProblemSolving
