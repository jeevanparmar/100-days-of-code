# Day 41 of #100DaysOfCode

Date: June 30, 2025

Today I solved the following LeetCode problems in C++:

---

## ✅ 102. Binary Tree Level Order Traversal
**Problem Link:** [Binary Tree Level Order Traversal](https://leetcode.com/problems/binary-tree-level-order-traversal/)  
**Approach:** Used a queue with NULL markers to track levels while performing BFS traversal.

```cpp
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if (!root)
            return ans;
        vector<int> curr;
        queue<TreeNode*> q;
        q.push(root);
        q.push(NULL);
        while (!q.empty()) {
            TreeNode* temp = q.front();
            q.pop();
            if (temp == NULL) {
                ans.push_back(curr);
                curr.clear();
                if (!q.empty())
                    q.push(NULL);
            } else {
                curr.push_back(temp->val);
                if (temp->left)
                    q.push(temp->left);
                if (temp->right)
                    q.push(temp->right);
            }
        }
        return ans;
    }
};
```

---

## ✅ 594. Longest Harmonious Subsequence  
**Problem Link:** [Longest Harmonious Subsequence](https://leetcode.com/problems/longest-harmonious-subsequence/)  
**Approach:** Counted frequencies using a map and checked pairs with difference 1.

```cpp
class Solution {
public:
    int findLHS(vector<int>& nums) {
        int max_len = 0;
        unordered_map<int,int> mp;
        for(int num : nums)
            mp[num]++;
        for(auto& num : mp) {
            int n = num.first;
            if(mp.find(n+1)!=mp.end()) {
                max_len = max(max_len , mp[n] + mp[n+1]);
            }
        }
        return max_len;
    }
};
```

---

Kept focus on level-wise traversal and frequency-based analysis today.  
#100DaysOfCode #LeetCode #CPlusPlus #buildinpublic #Coding
