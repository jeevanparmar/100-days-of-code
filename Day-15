# Day 15 of #100DaysOfCode

Today I solved the following LeetCode problem in C++:

## âœ… 135. Candy  
**Problem Link:** [Candy](https://leetcode.com/problems/candy/)  
**Approach:** Used two passes â€“ left-to-right and right-to-left â€“ to ensure each child gets more candies than the neighbor if they have a higher rating. Greedy strategy with a final sum of max values from both passes.

```cpp
class Solution {
public:
    int candy(vector<int>& ratings) {
        int n = ratings.size();
        vector<int> left(n);
        left[0] = 1;
        for (int i = 1; i < n; i++) {
            if (ratings[i] > ratings[i - 1]) {
                left[i] = left[i-1] + 1;
            } else {
                left[i] = 1;
            }
        }
        int curr =1;
        int ans = max(left[n-1],1);
        for (int i = n - 2; i >= 0; i--) {
            if (ratings[i] > ratings[i+1]) {
                curr=curr +1;
            } else {
                curr=1;
            }
            ans += max(left[i],curr);
        }
       return ans;
    }
};
```

---

Greedy problems are always fun and tricky â€” got to love the logic! ðŸ§   
#100DaysOfCode #LeetCode #CPlusPlus #Coding
