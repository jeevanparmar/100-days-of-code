# Day 20 of #100DaysOfCode

Today I solved the following LeetCode problem in C++:

## ✅ 234. Palindrome Linked List  
**Problem Link:** [Palindrome Linked List](https://leetcode.com/problems/palindrome-linked-list/)  
**Approach:** Used slow and fast pointers to reach the middle of the list, pushed the first half into a stack, and then compared the second half with stack elements.

```cpp
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        if (head->next == NULL)
            return true;
        ListNode* slow = head;
        ListNode* fast = head;
        stack<int> st;
        while (fast != NULL && fast->next != NULL) {
            int n = slow->val;
            st.push(n);
            slow = slow->next;
            fast = fast->next->next;
        }

        if (fast != NULL)
            slow = slow->next;
        
        while (slow != NULL) {
            if (slow->val == st.top()) {
                st.pop();
                slow = slow->next;
            } else {
                return false;
            }
        }

        return st.empty();
    }
};
```

---

Loved applying two-pointer and stack techniques to check palindrome logic! 🔁  
#100DaysOfCode #LeetCode #CPlusPlus #Coding
